package io.nuabo.hikitty.user.mock;

import io.nuabo.common.domain.exception.ResourceNotFoundException;
import io.nuabo.hikitty.user.application.port.ProfileRepository;
import io.nuabo.hikitty.user.domain.Profile;
import io.nuabo.hikitty.user.domain.User;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeProfileRepository implements ProfileRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Profile> profileData = new ArrayList<>();

    @Override
    public Profile save(Profile profile, User user) {
        if (profile.getId() == null || profile.getId() == 0) {
            Profile newProfile = Profile.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .originalName(profile.getOriginalName())
                    .savedName(profile.getSavedName())
                    .url(profile.getUrl())
                    .user(user)
                    .build();
            profileData.add(newProfile);
            return newProfile;
        } else {
            profileData.removeIf(item -> item.getId().equals(profile.getId()));
            profileData.add(profile);
            return profile;
        }
    }

    @Override
    public Optional<Profile> findById(long id) {
        return profileData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Profile getById(long id) {
        return profileData.stream().filter(item -> item.getId().equals(id)).findAny().orElseThrow(()->
                new ResourceNotFoundException("Profile", id));
    }

    @Override
    public Optional<Profile> findByUserId(long userId) {
        log.info("{}",profileData.stream().map(item -> item.getUser().getId()));
        return profileData.stream().filter(item ->   item.getUser().getId().equals(userId)).findAny();
    }

    @Override
    public Profile getByUserId(long userId) {
        return profileData.stream().filter(item -> item.getUser().getId().equals(userId)).findAny().orElseThrow(()->
                new ResourceNotFoundException("Profile", userId));
    }
}
