package io.nuabo.hikitty.board.mock;

import io.nuabo.common.domain.exception.ResourceNotFoundException;
import io.nuabo.hikitty.board.application.port.HeartRepository;
import io.nuabo.hikitty.board.domain.Heart;
import io.nuabo.hikitty.board.domain.Status;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeHeartRepository implements HeartRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Heart> data = new ArrayList<>();
    @Override
    public Heart save(Heart heart) {
        if (heart.getId() == null || heart.getId() == 0) {
            Heart newHeart = Heart.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .board(heart.getBoard())
                    .donerId(heart.getDonerId())
                    .status(heart.getStatus())
                    .createdAt(heart.getCreatedAt())
                    .donerProfileName(heart.getDonerProfileName())
                    .donerProfileUrl(heart.getDonerProfileUrl())
                    .donerName(heart.getDonerName())
                    .build();
            data.add(newHeart);
            return newHeart;
        }
        data.removeIf(item -> item.getId().equals(heart.getId()));
        data.add(heart);
        return heart;
    }

    @Override
    public Optional<Heart> findByBoardIdAndDonerId(Long boardId, Long donerId) {
        return Optional.empty();
    }

    @Override
    public Heart getById(Long heartId) {
        return findById(heartId).orElseThrow(
                () -> new ResourceNotFoundException("heart",heartId)
        );
    }

    @Override
    public Optional<Heart> findById(Long heartId) {
        return data.stream().filter(item -> item.getId().equals(heartId)).findAny();
    }

    @Override
    public List<Heart> findAllByBoardId(Long boardId) {
        return data.stream().filter(item -> item.getBoard().getId().equals(boardId)).toList();
    }

    @Override
    public List<Heart> getAllByUserId(Long id) {
        return data.stream().filter(item -> item.getDonerId().equals(id)).toList();
    }

    @Override
    public void saveAll(List<Heart> hearts) {
        data.addAll(hearts);
    }

    @Override
    public List<Heart> findAllByBoardIdAndStatus(Long boardId, Status status) {
        return data.stream().filter(item -> item.getBoard().getId().equals(boardId) && item.getStatus().equals(status)).toList();
    }
}
