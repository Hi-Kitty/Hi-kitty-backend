package io.nuabo.hikitty.board.mock;

import io.nuabo.common.domain.exception.ResourceNotFoundException;
import io.nuabo.hikitty.board.application.port.BoardRepository;
import io.nuabo.hikitty.board.domain.Board;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBoardRepository implements BoardRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Board> data = new ArrayList<>();
    @Override
    public Board save(Board board) {
        if (board.getId() == null || board.getId() == 0) {
            Board newBoard = Board.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(board.getTitle())
                    .content(board.getContent())
                    .subTitle(board.getSubTitle())
                    .targetAmount(board.getTargetAmount())
                    .endAt(board.getEndAt())
                    .fundraiserId(board.getFundraiserId())
                    .fundraiserName(board.getFundraiserName())
                    .fundraiserProfileUrl(board.getFundraiserProfileUrl())
                    .fundraiserProfileName(board.getFundraiserProfileName())
                    .createdAt(board.getCreatedAt())
                    .currentAmount(board.getCurrentAmount())
                    .build();
            data.add(newBoard);
            return newBoard;
        }
        data.removeIf(item -> item.getId().equals(board.getId()));
        data.add(board);
        return board;

    }

    @Override
    public Board getById(Long id) {
        return findById(id).orElseThrow(()->
                new ResourceNotFoundException("board",id));
    }

    @Override
    public Optional<Board> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Board> getAllByUserId(Long id) {
        return data.stream().filter(item -> item.getFundraiserId().equals(id)).toList();
    }

    @Override
    public void saveAll(List<Board> boards) {
        data.addAll(boards);
    }
}
